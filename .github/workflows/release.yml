name: Release

on:
  push:
    tags:
      - 'v*'

# 声明工作流所需权限
permissions:
  contents: write  # 允许创建 Release 和上传资产

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

  build-gui:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            bundles: nsis,wix
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            bundles: deb,appimage
          - platform: macos-latest
            target: x86_64-apple-darwin
            bundles: dmg

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install WiX (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314.exe" -OutFile "$env:TEMP\wix314.exe"
          Start-Process -FilePath "$env:TEMP\wix314.exe" -ArgumentList "/install", "/quiet", "/norestart" -Wait
          echo "WIX=$env:ProgramFiles (x86)\WiX Toolset v3.14" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: src-tauri/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Install frontend dependencies
        run: npm install

      - name: Build Tauri app
        run: npm run build

      - name: Upload Release Assets (Windows - NSIS)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/nsis/claude-config-manager_${{ needs.create-release.outputs.version }}_x64-setup.exe
          asset_name: claude-config-manager_${{ needs.create-release.outputs.version }}_x64-setup.exe
          asset_content_type: application/x-msdownload

      - name: Upload Release Assets (Windows - MSI zh-CN)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/msi/claude-config-manager_${{ needs.create-release.outputs.version }}_x64_zh-CN.msi
          asset_name: claude-config-manager_${{ needs.create-release.outputs.version }}_x64_zh-CN.msi
          asset_content_type: application/x-msi

      - name: Upload Release Assets (Windows - MSI en-US)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/msi/claude-config-manager_${{ needs.create-release.outputs.version }}_x64_en-US.msi
          asset_name: claude-config-manager_${{ needs.create-release.outputs.version }}_x64_en-US.msi
          asset_content_type: application/x-msi

      - name: Upload Release Assets (Linux - DEB)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/deb/claude-config-manager_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_name: claude-config-manager_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Release Assets (Linux - AppImage)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/appimage/claude-config-manager_${{ needs.create-release.outputs.version }}_amd64.AppImage
          asset_name: claude-config-manager_${{ needs.create-release.outputs.version }}_amd64.AppImage
          asset_content_type: application/x-executable

      - name: Upload Release Assets (macOS - DMG)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/dmg/claude-config-manager_${{ needs.create-release.outputs.version }}_x64.dmg
          asset_name: claude-config-manager_${{ needs.create-release.outputs.version }}_x64.dmg
          asset_content_type: application/x-apple-diskimage

  build-cli:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: claude-config.exe
            archive: claude-config-cli-$VERSION-Windows-x86_64.zip
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            binary: claude-config
            archive: claude-config-cli-$VERSION-Linux-x86_64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: claude-config
            archive: claude-config-cli-$VERSION-Darwin-x86_64.tar.gz

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cli-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cli-cargo-

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: claude-config-cli/target
          key: ${{ runner.os }}-cli-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cli-cargo-build-

      - name: Build CLI
        working-directory: claude-config-cli
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $version = "${{ needs.create-release.outputs.version }}"
          $archive = "${{ matrix.archive }}".Replace('$VERSION', $version)
          Copy-Item "claude-config-cli/target/${{ matrix.target }}/release/${{ matrix.binary }}" -Destination "claude-config.exe"
          Compress-Archive -Path "claude-config.exe" -DestinationPath $archive
          echo "ARCHIVE_NAME=$archive" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Package (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          version="${{ needs.create-release.outputs.version }}"
          archive="${{ matrix.archive }}"
          archive="${archive/\$VERSION/$version}"
          cp "claude-config-cli/target/${{ matrix.target }}/release/${{ matrix.binary }}" claude-config
          tar czf "$archive" claude-config
          echo "ARCHIVE_NAME=$archive" >> $GITHUB_ENV

      - name: Upload CLI Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/octet-stream
